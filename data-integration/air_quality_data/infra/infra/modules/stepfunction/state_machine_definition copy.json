{
  "Comment": "A description of my state machine",
  "StartAt": "Set Environment",
  "States": {
    "Set Environment": {
      "Type": "Pass",
      "Assign": {
        "APP_ENV": "${app_env}"
      },
      "Next": "Initialize Task",
      "Output": {}
    },
    "Initialize Task": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${init_task_lambda_function_arn}",
        "Payload": {
          "APP_ENV": "{% $APP_ENV %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Extract Data",
      "Output": {},
      "Assign": {
        "AWS_REGION": "{% $states.result.Payload.aws_region %}",
        "TASK_DATE": "{% $states.result.Payload.task_date %}",
        "INTEGRATION_BUCKET": "{% $states.result.Payload.integration_bucket %}",
        "LOCATION_DESTINATION": "{% $states.result.Payload.location_destination %}",
        "PROPERTY_DESTINATION": "{% $states.result.Payload.property_destination %}",
        "TASK_BATCH_DESTINATION": "{% $states.result.Payload.task_batch_destination %}",
        "BATCH_SIZE": "{% $states.result.Payload.batch_size %}",
        "CONCURRENCY": "{% $states.result.Payload.concurrency %}"
      }
    },
    "Extract Data": {
      "Type": "Task",
      "Resource": "arn:aws:states:::ecs:runTask.sync",
      "Arguments": {
        "LaunchType": "FARGATE",
        "Cluster": "${ecs_cluster_arn}",
        "TaskDefinition": "${ecs_extract_data_task_definition_arn}",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "Subnets": ["${private_subnet_ids}"],
            "SecurityGroups": ["${step_function_state_machine_sg_id}"],
            "AssignPublicIp": "DISABLED"
          }
        },
        "Overrides": {
          "ContainerOverrides": [
            {
              "Name": "task-runner",
              "Environment": [
                { "Name": "APP_ENV", "Value": "{% $APP_ENV %}" },
                { "Name": "AWS_REGION", "Value": "{% $AWS_REGION %}" },
                {
                  "Name": "INTEGRATION_BUCKET",
                  "Value": "{% $INTEGRATION_BUCKET %}"
                },
                {
                  "Name": "LOCATION_DESTINATION",
                  "Value": "{% $LOCATION_DESTINATION %}"
                },
                { "Name": "TASK_DATE", "Value": "{% $TASK_DATE %}" },
                { "Name": "STEP_FUNCTION_RUNNER", "Value": "true" }
              ]
            }
          ]
        }
      },
      "Retry": [
        {
          "ErrorEquals": ["States.ALL"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Create Task Batches",
      "Output": {}
    },
    "Create Task Batches": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${create_batch_job_task_lambda_function_arn}",
        "Payload": {
          "APP_ENV": "{% $APP_ENV %}",
          "AWS_REGION": "{% $AWS_REGION %}",
          "INTEGRATION_BUCKET": "{% $INTEGRATION_BUCKET %}",
          "LOCATION_DESTINATION": "{% $LOCATION_DESTINATION %}",
          "PROPERTY_DESTINATION": "{% $PROPERTY_DESTINATION %}",
          "TASK_BATCH_DESTINATION": "{% $TASK_BATCH_DESTINATION %}",
          "TASK_DATE": "{% $TASK_DATE %}",
          "BATCH_SIZE": "{% $BATCH_SIZE %}",
          "CONCURRENCY": "{% $CONCURRENCY %}"
        }
      },
      "Next": "Batch Processor",
      "Assign": {
        "BATCH_S3_KEY": "{% $states.result.Payload %}"
      },
      "Catch": [
        {
          "ErrorEquals": ["NoRecordFound"],
          "Next": "Handle No Files Available"
        }
      ],
      "Output": {}
    },
      "Handle No Files Available": {
      "Type": "Pass",
      "Assign": {
        "status": "NO_FILES_AVAILABLE",
        "message": "No files available for processing on the specified date",
        "task_date": "{% $TASK_DATE %}"
      },
      "End": true
    },
    "Batch Processor": {
      "Type": "Map",
      "Label": "BatchProcessor",
      "ItemBatcher": {
        "MaxItemsPerBatch": "{% $CONCURRENCY %}"
      },
      "MaxConcurrency": 1,
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:getObject",
        "ReaderConfig": {
          "InputType": "JSON"
        },
        "Arguments": {
          "Bucket": "{% $INTEGRATION_BUCKET%}",
          "Key": "{% $BATCH_S3_KEY %}"
        }
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "Get Task Batch",
        "States": {
          "Get Task Batch": {
            "Type": "Pass",
            "Next": "Get Start Time",
            "Assign": {
              "TASK_BATCH": "{% $states.input.Items %}"
            },
            "Output": {}
          },
          "Get Start Time": {
            "Type": "Pass",
            "Next": "Parallel Subtask Handler",
            "Assign": {
              "startTime": "{% $floor($toMillis($now()) / 1000) %}"
            },
            "Output": {}
          },
          "Parallel Subtask Handler": {
            "Type": "Map",
            "Label": "ParallelSubtaskHandler",
            "ItemBatcher": {
              "MaxItemsPerBatch": 1
            },
            "MaxConcurrency": 1000,
            "Items": "{% $TASK_BATCH %}",
            "ItemProcessor": {
              "ProcessorConfig": {
                "Mode": "DISTRIBUTED",
                "ExecutionType": "STANDARD"
              },
              "StartAt": "Transform Data",
              "States": {
                "Transform Data": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Arguments": {
                    "FunctionName": "${transform_data_task_lambda_function_arn}",
                    "Payload": {
                      "APP_ENV": "{% $states.input.Items[0].app_env %}",
                      "AWS_REGION": "{% $states.input.Items[0].aws_region %}",
                      "INTEGRATION_BUCKET": "{% $states.input.Items[0].integration_bucket %}",
                      "LOCATION_DESTINATION": "{% $states.input.Items[0].location_destination %}",
                      "PROPERTY_DESTINATION": "{% $states.input.Items[0].property_destination %}",
                      "TASK_DATE": "{% $states.input.Items[0].task_date %}",
                      "STEP_FUNCTION_RUNNER": "true",
                      "B_NO": "{% $states.input.Items[0].b_no & '' %}",
                      "T_NO": "{% $states.input.Items[0].t_no & '' %}",
                      "START": "{% $states.input.Items[0].start & '' %}",
                      "END": "{% $states.input.Items[0].end & '' %}"
                    }
                  },
                  "Output": {},
                  "End": true
                }
              }
            },
            "Output": {},
            "Next": "Calculate Wait Time"
          },
          "Calculate Wait Time": {
            "Type": "Pass",
            "Assign": {
              "elapsedSeconds": "{% $floor($toMillis($now()) / 1000) - $startTime %}"
            },
            "Next": "Wait If Needed",
            "Output": {}
          },
          "Wait If Needed": {
            "Type": "Wait",
            "Seconds": "{% $elapsedSeconds < 70 ? 70 - $elapsedSeconds : 0 %}",
            "Next": "End",
            "Output": {}
          },
          "End": {
            "Type": "Pass",
            "Assign": {
              "TASK_BATCH": null
            },
            "End": true,
            "Output": {}
          }
        }
      },
      "Output": {},
      "Next": "Load Data"
    },
    "Load Data": {
      "Type": "Task",
      "Resource": "arn:aws:states:::ecs:runTask.sync",
      "Arguments": {
        "LaunchType": "FARGATE",
        "Cluster": "${ecs_cluster_arn}",
        "TaskDefinition": "${ecs_load_data_task_definition_arn}",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "Subnets": ["${private_subnet_ids}"],
            "SecurityGroups": ["${step_function_state_machine_sg_id}"],
            "AssignPublicIp": "DISABLED"
          }
        },
        "Overrides": {
          "ContainerOverrides": [
            {
              "Name": "task-runner",
              "Environment": [
                {
                  "Name": "APP_ENV",
                  "Value": "{% $APP_ENV %}"
                },
                {
                  "Name": "AWS_REGION",
                  "Value": "{% $AWS_REGION %}"
                },
                {
                  "Name": "INTEGRATION_BUCKET",
                  "Value": "{% $INTEGRATION_BUCKET %}"
                },
                {
                  "Name": "PROPERTY_DESTINATION",
                  "Value": "{% $PROPERTY_DESTINATION %}"
                },
                {
                  "Name": "TASK_DATE",
                  "Value": "{% $TASK_DATE %}"
                },
                {
                  "Name": "STEP_FUNCTION_RUNNER",
                  "Value": "true"
                }
              ]
            }
          ]
        }
      },
      "Retry": [
        {
          "ErrorEquals": ["States.ALL"],
          "IntervalSeconds": 10,
          "MaxAttempts": 1,
          "BackoffRate": 10,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true,
      "Output": {}
    }
  },
  "QueryLanguage": "JSONata"
}
